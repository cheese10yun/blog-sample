server:
    port: 8772
spring:
    application:
        name: order-service

    #    cloud:
    #        bus:
    #            trace:
    #                enabled: true
    #            destination: ${spring.application.name}-config-bus-refesh-event
    #
    #    kafka:
    #        bootstrap-servers: 192.168.0.10:9092

    config:
        import: "optional:configserver:http://localhost:8888"

eureka:
    instance:
        prefer-ip-address: true
        instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    client:
        register-with-eureka: true
        fetch-registry: true
        service-url:
            default-zone: http://localhost:8761/eureka/


resilience4j:
    bulkhead:
        instances:
            findOderByUserId:
                maxConcurrentCalls: 25 #  허가된 동시 실행 수를 25로 지정
                maxWaitDuration: 0 # 포화 상태의 Bulkhead에 진입하기 위해 block 되는 최대 시간, 값이 0이므로 바로 요청을 막는다.

    ratelimiter:
        instances:
            findOderByUserId:
                limitForPeriod: 50
                limitRefreshPeriod: 500ns # 기간 동안 허용되는 요청 수
                timeoutDuration: 5s # 허가를 위해 쓰레드가 대기하는 기본 시간
                registerHealthIndicator: true

    timelimiter:
        instances:
            findOderByUserId:
                timeoutDuration: 1s # 원격 서버로부터 해당 시간안에 응답이 오는 것을 제한
                cancelRunningFuture: true # Timeout 발생 후 future를 취소할지 결정하는 Boolean 값

    circuitbreaker:
        configs:
            default:
                registerHealthIndicator: true
                minimumNumberOfCalls: 5
                failureRateThreshold: 50
                waitDurationInOpenState: 10s
                slidingWindowType: COUNT_BASED
        #                slowCallRateThreshold: 100
        #                slowCallDurationThreshold: 60000
        #                permittedNumberOfCallsInHalfOpenState: 4
        #                maxWaitDurationInHalfOpenState: 1000
        #                minimumNumberOfCalls: 10

        instances:
            findOderByUserId:
                baseConfig: default

        metrics:
            enabled: true
            legacy:
                enabled: true


management:
    endpoints:
        web:
            exposure:
                include:
                    - "*"
    #                    - "env"
    #                    - "refresh"
    #                    - "bus-refresh"
    #                    - "bus-env"
    #                    - "health"
    #                    - "trace"
    #                    - "prometheus"
    #                    - "metrics"
    endpoint:
        metrics:
            enabled: true
        refresh:
            enabled: true
        circuitbreakers:
            enabled: true
        health:
            enabled: true
            show-details: always

    health:
        circuitbreakers:
            enabled: true
        db:
            enabled: true

logging:
    level:
        ROOT: info

message:
    profile: "default local"