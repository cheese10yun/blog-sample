input {
    jdbc{
        jdbc_validate_connection => true
        jdbc_driver_library => "/Users/yun/yun/blog-sample/logstash/mysql-connector-java-8.0.27.jar"
        jdbc_connection_string => "jdbc:mysql://localhost:3366/batch_study?useSSL=false&serverTimezone=UTC&autoReconnect=true&rewriteBatchedStatements=true&logger=Slf4JLogger&profileSQL=false&maxQuerySizeToLog=100000"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "root"
        jdbc_password => ""
        plugin_timezone => "local"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => updated_at
        tracking_column_type => timestamp
        clean_run => false
        charset => "UTF-8"
        jdbc_fetch_size => 100000
        statement => "SELECT * FROM autopay_payout_base where updated_at >= :sql_last_value"
        last_run_metadata_path => "./logstash/config/last_value.yml"
        type => "payout_base"
    }
}

filter {
    mutate {
        convert => {
            "init_payable_amount" => "float"
            "payable_amount" => "float"
            "specified_pending_amount" => "float"
            "liability_pending_amount" => "float"
            "minus_amount" => "float"
            "limit_amount" => "float"
            "payout_amount" => "float"
            "payout_completed_amount" => "float"
        }
    }
    date_formatter {source => "confirm_date" target => "confirm_date" pattern => "yyyy-MM-dd"}
    date_formatter {source => "target_date" target => "target_date" pattern => "yyyy-MM-dd"}
    date_formatter {source => "payout_date" target => "payout_date" pattern => "yyyy-MM-dd"}
    date_formatter {source => "init_payout_date" target => "init_payout_date" pattern => "yyyy-MM-dd"}
    date_formatter {source => "payout_start_date" target => "payout_start_date" pattern => "yyyy-MM-dd"}
    date_formatter {source => "payout_end_date" target => "payout_end_date" pattern => "yyyy-MM-dd"}
    date_formatter {source => "created_at" target => "created_at" pattern => "yyyy-MM-dd'T'HH:mm:ss.SSS"}
    date_formatter {source => "updated_at" target => "updated_at" pattern => "yyyy-MM-dd'T'HH:mm:ss.SSS"}
    date_formatter {source => "approved_at" target => "approved_at" pattern => "yyyy-MM-dd'T'HH:mm:ss.SSS"}
}

output {
    if[type]=="payout_base"{
        elasticsearch {
            hosts => "${settlement_es_hosts}:9200"
            user => "${settlement_es_username}"
            password => "${settlement_es_password}"
            index => "payout_base"
            document_id => "%{[id]}_%{[channel_type]}"
        }
    }
}